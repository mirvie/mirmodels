% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi-lm.R
\name{multi_resids}
\alias{multi_resids}
\title{Get the residuals from multiple linear models.}
\usage{
multi_resids(lms, lms_data = NULL, reset_mean_med = FALSE, new_data = NULL)
}
\arguments{
\item{lms}{A list of fitted linear models (the results of calls to \code{\link[stats:lm]{stats::lm()}} or \code{\link[MASS:rlm]{MASS::rlm()}}). Most likely, the output of a call to
\code{\link[=multi_lm]{multi_lm()}}.}

\item{lms_data}{The data frame that was passed as the \code{df} argument to
\code{\link[=multi_lm]{multi_lm()}}, if \code{\link[=multi_lm]{multi_lm()}} was used to create \code{lms}.}

\item{reset_mean_med}{A flag. If \code{TRUE}, for each variable for which the
residuals are calculated the mean (or in the case of robust linear models,
the median) of the original values of these variables is added to the
residuals, such that the output is again centred on this value.}

\item{new_data}{Rather than calculating the residuals on the data where the
model was fit, you can pass a new dataset and calculate the residuals
there.}
}
\value{
A data frame of the residuals. The variables in this data frame will
have their original names. If \code{lms_data} is given, other columns (ones for
which residuals were not calculated) of that data frame will be returned as
is.
}
\description{
There is the option to add the mean (or median for robust models) to the
residuals.
}
\examples{
if (rlang::is_installed("mirmisc")) {
  gars_data <- get_combined_cohort_data(c("ga", "rs"), log2 = TRUE) \%>\%
    dplyr::mutate(
      cohort = dplyr::if_else(startsWith(mirvie_id, "RS"), "RS", "GA"),
      cohort = factor(cohort),
      meta_major_race = forcats::fct_drop(meta_major_race)
    ) \%>\%
    dplyr::filter(!is.na(meta_major_race), !is.na(meta_collectionga))
  xs <- c("cohort", "meta_major_race", "meta_collectionga")
  ys <- gars_data \%>\%
    dplyr::select(dplyr::any_of(mirmisc::get_gene_names())) \%>\%
    purrr::map_dbl(sum) \%>\%
    sort() \%>\%
    tail(100) \%>\%
    names() # ys are the highest expressed 100 genes
  lms <- multi_lm(gars_data, xs, ys)
  resids <- multi_resids(lms, gars_data, reset_mean_med = TRUE)
}
}
