% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roc.R
\name{plot_roc}
\alias{plot_roc}
\title{Plot ROC curves with confidence intervals.}
\usage{
plot_roc(
  rocdf,
  conf_level = 0.95,
  aes_opts = list(conf_alpha = 0.8, roc_line_size = 1, roc_line_color = "black",
    null_line_size = 1, null_line_color = "blue", null_line_alpha = 0.5),
  quick = TRUE,
  parallel = TRUE
)
}
\arguments{
\item{rocdf}{A data frame with columns \code{response} and \code{predictor} (see
\code{\link[pROC:roc]{pROC::roc()}}. To plot several models, provide a \code{model} column with the
model names; one ROC will be calculated and plot per model name.}

\item{conf_level}{A number in \verb{[0, 1]}. This is passed as the \code{conf.level}
argument to \code{\link[pROC:ci.se]{pROC::ci.se()}} and \code{\link[pROC:ci.sp]{pROC::ci.sp()}}. Use \code{conf_level = NA} to
disable plotting of confidence intervals.}

\item{aes_opts}{A named list of aesthetic options for the plot.
\itemize{
\item \code{conf_alpha}: Transparency of the confidence interval lines.
\item \code{roc_line_size}: Thickness of the ROC line.
\item \code{roc_line_color}: Color of the ROC line.
\item \code{null_line_size}: Thickness of the null line.
\item \code{null_line_color}: Color of the null line.
\item \code{null_line_alpha}: Transparency of the null line
}}

\item{quick}{A flag. With \code{quick = FALSE}, ROC confidence intervals are
calculated with a 2,000-round bootstrap. \code{quick = TRUE} will use 100 rounds
instead. \code{quick = TRUE} is fine for exploration.}

\item{parallel}{A flag. Calculate the sensitivity and specificity confidence
intervals simultaneously? This is a small speedup (<2x).}
}
\value{
A \code{\link[ggplot2:ggplot]{ggplot2::ggplot()}}.
}
\description{
Plot ROC curves for several different models (or just one) with confidence
intervals calculated by \code{\link[pROC:ci.se]{pROC::ci.se()}} and \code{\link[pROC:ci.sp]{pROC::ci.sp()}}.
}
\details{
Inside this function, \code{\link[pROC:roc]{pROC::roc()}} is called with \code{direction = "<"}. The
easiest thing is to have \code{rocdf$response} be a vector of 0s and 1s and have
\code{rocdf$predictor} be a vector of probabilities where each probability is the
probability of a response of 1. If \code{rocdf$predictor} is logical, then these
\code{rocdf$predictor} is the probability of a response of \code{TRUE}.
}
\examples{
rocdf1 <- dplyr::tibble( # decent model
  predictor = seq(0.01, 0.99, length.out = 1000),
  response = purrr::rbernoulli(length(predictor), predictor)
)
rocdf2 <- dplyr::tibble( # bad model
  predictor = seq(0.01, 0.99, length.out = 88),
  response = purrr::rbernoulli(length(predictor), 0.5)
)
rocdf12 <- dplyr::bind_rows(
  dplyr::bind_cols(rocdf1, model = "decent"),
  dplyr::bind_cols(rocdf2, model = "bad")
)
plot_roc(rocdf1,
  quick = TRUE, parallel = FALSE,
  aes_opts = list(conf_alpha = 0.3)
)
plot_roc(rocdf2,
  conf_level = NA, quick = TRUE,
  aes_opts = list(roc_line_size = 2, roc_line_color = "red")
)
plot_roc(rocdf12,
  conf_level = NA, quick = TRUE,
  aes_opts = list(null_line_size = 2, null_line_alpha = 1)
)
plot_roc(rocdf12, conf_level = 0.99, quick = TRUE)
}
