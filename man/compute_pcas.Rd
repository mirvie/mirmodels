% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pca.R
\name{compute_pcas}
\alias{compute_pcas}
\title{Compute principal components.}
\usage{
compute_pcas(
  df,
  num_comp = 5,
  subset = NULL,
  normalize = TRUE,
  robust = FALSE,
  crit_pca_distances = 0.999
)
}
\arguments{
\item{df}{A data frame.}

\item{num_comp}{A positive integer. The number of PCA components to compute.}

\item{subset}{A character vector. The subset of columns to use for PCA
calculation. Default is all columns. Columns in \code{df} outside of this subset
will be kept in the result.}

\item{normalize}{A flag. Center and scale before PCA calculation?}

\item{robust}{A flag. Use robust PCA (from \code{\link[rrcov:PcaGrid]{rrcov::PcaGrid()}})?}

\item{crit_pca_distances}{A number between 0 and 1. Outlier identification
parameter. See \code{\link[rrcov:PcaGrid]{rrcov::PcaGrid()}}. The larger this number, the fewer
outliers identified.}
}
\value{
A data frame with the principal components with attributes
\itemize{
\item \code{var_exp}: A numeric vector. The variance explained by each component.
\item \code{loadings}: A data frame. The contribution of each variable to each
principal component.
\item \code{outlier}: A logical vector with length \code{nrow(df)}. \code{TRUE} for outlier,
\code{FALSE} otherwise. This is present with \code{robust = TRUE} only.
}
}
\description{
Computation can be done using the \link[recipes:recipes]{recipes} package
(\code{robust = FALSE}, uses regular PCA) or with the \link[rrcov:PcaGrid]{rrcov}
package which uses \code{\link[rrcov:PcaGrid]{rrcov::PcaGrid()}}, a robust PCA computation with built-in
outlier identification.
}
\examples{
if (rlang::is_installed("mirmisc")) {
  ga_data <- get_ga_data(
    log2 = TRUE,
    gene_predicate = ~ median(.) > 0
  )
  pca_reg <- compute_pcas(ga_data,
    subset = intersect(
      mirmisc::get_gene_names(),
      names(ga_data)
    ),
    robust = FALSE
  )
  pca_rob <- compute_pcas(ga_data,
    subset = intersect(
      mirmisc::get_gene_names(),
      names(ga_data)
    ),
    robust = TRUE
  )
  ggplot2::ggplot(
    pca_reg,
    ggplot2::aes(PC1, PC2, color = meta_collectionga)
  ) +
    ggplot2::geom_point() +
    ggplot2::scale_color_viridis_c() +
    ggplot2::ggtitle("GAPPS regular")
  ggplot2::ggplot(
    pca_rob,
    ggplot2::aes(PC1, PC2, color = meta_collectionga)
  ) +
    ggplot2::geom_point() +
    ggplot2::scale_color_viridis_c() +
    ggplot2::ggtitle("GAPPS robust")
}
}
