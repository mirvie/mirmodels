% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learning-curve.R
\name{learn_curve_cv}
\alias{learn_curve_cv}
\title{Create a cross-validation learning curve.}
\usage{
learn_curve_cv(
  data,
  wf,
  folds,
  repeats,
  metric_calculator,
  strata = NULL,
  pkgs = c("mirmodels"),
  n_cores = 1
)
}
\arguments{
\item{data}{A data frame. The data to be used for the modelling.}

\item{wf}{A \code{\link[workflows:workflow]{workflows::workflow()}}. Should have been constructed using
\code{data}.}

\item{folds}{An integer vector. Different \code{v} to use in
\code{\link[rsample:vfold_cv]{rsample::vfold_cv()}}.}

\item{repeats}{The number of times to repeat each cross-validation.}

\item{metric_calculator}{A function which takes a single data frame argument
and returns a double. The data frame that will be passed to this function
is the output of \code{\link[tune:collect_predictions]{tune::collect_predictions()}} which will be run on the
output of \code{tune::fit_resamples(save_preds = TRUE)}. See the example below.}

\item{strata}{A string. Variable to stratify on when splitting for
cross-validation.}

\item{pkgs}{A character vector. Passed to \code{\link[tune:control_grid]{tune::control_resamples()}}.}

\item{n_cores}{A positive integer. The cross-validation can optionally be
done in parallel. Specify the number of cores for parallel processing here.}
}
\value{
A tibble with 2 columns:
\itemize{
\item \code{training_samples}: The number of samples used in training.
\item \code{score}: The score computed by \code{metric_calculator()}.
}
}
\description{
This function needs a \link[workflows:workflow]{workflows::workflow} ready for \link[tune:fit_resamples]{tune::fit_resamples}.
It does different fold cross-validation to vary the training set sizes and
then collects the predictions and scores them.
}
\examples{
data("BostonHousing", package = "mlbench")
bh <- dplyr::select_if(BostonHousing, is.numeric)
mod <- parsnip::linear_reg(penalty = 0, mixture = 0) \%>\%
  parsnip::set_engine("lm")
wf <- workflows::workflow() \%>\%
  workflows::add_formula(medv ~ .) \%>\%
  workflows::add_model(mod)
metric_calculator <- ~ yardstick::mae(., medv, .pred)$.estimate
lccv <- suppressWarnings(
  learn_curve_cv(bh, wf, 2:9, 3, metric_calculator, n_cores = 4)
)
}
