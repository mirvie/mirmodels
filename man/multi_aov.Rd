% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi-lm.R
\name{multi_aov}
\alias{multi_aov}
\title{Perform multiple analyses of variance on linear model objects.}
\usage{
multi_aov(lms, lms_data = NULL, type = 1)
}
\arguments{
\item{lms}{A list of fitted linear models (the results of calls to \code{\link[stats:lm]{stats::lm()}} or \code{\link[MASS:rlm]{MASS::rlm()}}). Most likely, the output of a call to
\code{\link[=multi_lm]{multi_lm()}}.}

\item{lms_data}{The data frame that was passed as the \code{df} argument to
\code{\link[=multi_lm]{multi_lm()}}, if \code{\link[=multi_lm]{multi_lm()}} was used to create \code{lms}.}

\item{type}{The type of sum of squares to use. Types I and II are currently
supported. Type I can be used with either default or robust linear models,
but type II cannot be used with robust linear models.}
}
\value{
An object of class \code{mirmodels_multi_aov_df}. A long data frame
with columns:
\itemize{
\item \code{y}: The name of the response variable
\item \code{x}: The name of the explanatory variable.
\item \code{pctvarexp}: The percent of variance explained by \code{x}.
\item \code{pval}: The p-value for x explaining a non-zero amount of \code{y}'s variance.
}
}
\description{
Given a list of linear models (the results of calls to \code{\link[stats:lm]{stats::lm()}} or
\code{\link[MASS:rlm]{MASS::rlm()}}), all of which used the same explanatory variables with the
same dataset (most likely the output of a call to \code{\link[=multi_lm]{multi_lm()}}), perform
analyses of variance on all of them and arrange the result into a single
data frame.
}
\details{
\code{lms_data} is needed to ensure that the elements of the \code{y} column in the
return match the input. You should provide this argument if you can at all.
}
\examples{
if (requireNamespace("mirmisc")) {
  gars_data <- get_combined_cohort_data(c("ga", "rs"), log2 = TRUE) \%>\%
    dplyr::mutate(
      cohort = factor(
        dplyr::if_else(startsWith(mirvie_id, "RS"), "RS", "GA")
      ),
      meta_major_race = forcats::fct_drop(meta_major_race)
    ) \%>\%
    dplyr::filter(!is.na(meta_collectionga), !is.na(meta_major_race))
  xs <- c("cohort", "meta_major_race", "meta_collectionga")
  ys <- gars_data \%>\%
    dplyr::select(dplyr::any_of(mirmisc::get_gene_names())) \%>\%
    purrr::map_dbl(sum) \%>\%
    sort() \%>\%
    tail(100) \%>\%
    names() # ys are the highest expressed 100 genes
  lms <- multi_lm(gars_data, xs, ys, robust = TRUE)
  aovs <- multi_aov(lms)
  summary(aovs)
}
}
\concept{multiple linear modelling functions}
